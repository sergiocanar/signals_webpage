// Generated Arduino code for NodeMCU to serve an HTML page

#include <ESP8266WiFi.h> 
#include <Wire.h>

// WiFi config
const char* ssid = "ColdPalmer";  // WiFi Name
const char* password = "david4567";  // WiFi Password
WiFiServer server(80);

void setup() {
    Serial.begin(9600);
    delay(10);

    // Connecting to WiFi
    Serial.print("Connecting to ");
    Serial.println(ssid); 
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
    }
    Serial.println("");
    Serial.println("WiFi connected");
    server.begin();
    Serial.println("Server started");
    Serial.print("Use this URL to connect: http://");
    Serial.println(WiFi.localIP());
}

void loop() {
    WiFiClient client = server.available();
    if (!client) {
    return;
    }

    Serial.println("New client connected");

    // Send headers
    client.println("HTTP/1.1 200 OK");
    client.println("Content-Type: text/html");
    client.println("Connection: close");
    client.println();

  // Send HTML content
  client.print("<!DOCTYPE html>");
  client.print("<html lang='en'>");
  client.print("");
  client.print("<head>");
  client.print("    <meta charset='UTF-8'>");
  client.print("    <meta name='viewport' content='width=device-width'>");
  client.print("    <meta http-equiv='X-UA-Compatible' content='ie=edge'>");
  client.print("    <link rel='icon' href='https://github.com/sergiocanar/signals_webpage/blob/main/images/favicon.ico'>");
  client.print("    <style>");
  client.print("/* General */");
  client.print("html, body {");
  client.print("    height: 100%;  /* Ensure full height of the viewport */");
  client.print("    margin: 0;");
  client.print("    padding: 0;");
  client.print("    background-color: #F9F5FF;");
  client.print("    font-family: Arial, sans-serif;");
  client.print("    text-align: center; /* Center all text horizontally */");
  client.print("    display: flex;");
  client.print("    flex-direction: column;");
  client.print("}");
  client.print("");
  client.print(".container {");
  client.print("    flex: 1; /* This allows the container to grow and fill the available space */");
  client.print("    padding-bottom: 60px; /* Adjust this to match the footer height */");
  client.print("}");
  client.print("");
  client.print("/* Header */");
  client.print("header {");
  client.print("    background-color: #28262C;");
  client.print("    color: #F9F5FF;");
  client.print("    padding: 20px 0;");
  client.print("}");
  client.print("");
  client.print("/* Sections */");
  client.print("section {");
  client.print("    padding: 20px;");
  client.print("    margin: 20px;");
  client.print("    background-color: #F9F5FF;");
  client.print("    border-radius: 8px;");
  client.print("    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);");
  client.print("}");
  client.print("");
  client.print("h1 {");
  client.print("    margin: 0;");
  client.print("    font-size: 2em;");
  client.print("    color: #28262C;");
  client.print("}");
  client.print("");
  client.print("h2 {");
  client.print("    margin: 0;");
  client.print("    font-size: 1.5em;");
  client.print("    color: #28262C;");
  client.print("}");
  client.print("");
  client.print("");
  client.print("/* Button */");
  client.print("button {");
  client.print("    padding: 10px 20px;");
  client.print("    font-size: 1em;");
  client.print("    color: #f7f7f7;");
  client.print("    background-color: #14248A;");
  client.print("    border: none;");
  client.print("    border-radius: 5px;");
  client.print("    cursor: pointer;");
  client.print("    margin-top: 20px;");
  client.print("}");
  client.print("");
  client.print("button:hover {");
  client.print("    background-color: #0056b3;");
  client.print("}");
  client.print("");
  client.print("/* List */");
  client.print("ul {");
  client.print("    list-style-type: none;");
  client.print("    padding: 0;");
  client.print("}");
  client.print("");
  client.print("li {");
  client.print("    margin: 10px 0;");
  client.print("    font-size: 16px;");
  client.print("}");
  client.print("");
  client.print("/* Footer */");
  client.print("#footer {");
  client.print("    position: fixed; /* Keep footer fixed at the bottom */");
  client.print("    bottom: 0;");
  client.print("    width: 100%; /* Full width */");
  client.print("    background-color: #28262C;");
  client.print("    color: white;");
  client.print("    padding: 10px;");
  client.print("    text-align: center;");
  client.print("    z-index: 10; /* Make sure it's above other content */");
  client.print("    overflow-y: auto; /* Enable scrolling if content exceeds the height */");
  client.print("}");
  client.print("");
  client.print("a {");
  client.print("    color: #d7db1c;");
  client.print("}");
  client.print("");
  client.print("a:link, a:visited {");
  client.print("    color: #d4c2fc;");
  client.print("    text-decoration: none;");
  client.print("}");
  client.print("");
  client.print("#ecg-container {");
  client.print("    width: 100%; ");
  client.print("    height: 400px;");
  client.print("}");
  client.print("");
  client.print("#tachogran-container {");
  client.print("    width: 100%;");
  client.print("    height: 400px;");
  client.print("    margin-top: 20px;");
  client.print("}");
  client.print("");
  client.print("");
  client.print("#freq {");
  client.print("    width: 10%;");
  client.print("    margin: 0 auto;");
  client.print("}");
  client.print("</style>");
  client.print("    <link href='https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css' rel='stylesheet' integrity='sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH' crossorigin='anonymous'>");
  client.print("    <script src='https://code.highcharts.com/highcharts.js'></script>");
  client.print("</head>");
  client.print("");
  client.print("<body>");
  client.print("    <div class='container'>");
  client.print("        <div class='row'>");
  client.print("            <h1 id='title'>ECG Visualization</h1>");
  client.print("            <h2 id='subtitle'>Lab 4</h2>");
  client.print("            <figure>");
  client.print("                <img class='img-fluid' src='https://data.org/wp-content/uploads/2022/02/Universidad-de-los-Andes-650x251.png' ");
  client.print("                alt='Universidad de los Andes' style='width: 10%'>");
  client.print("                <figcaption>Departamento de Ingenieria Biomedica</figcaption>");
  client.print("                <hr>");
  client.print("            </figure>");
  client.print("        </div>");
  client.print("        <div class='row'>");
  client.print("            <div class='col-6'>");
  client.print("                <div>");
  client.print("                    <label for='freq'>Frequency: </label>");
  client.print("                    <input type='range' id='freq' min='0' max='100' value='10' step='5'>");
  client.print("                    <span id='freq-display'>10 Hz</span>");
  client.print("                </div>");
  client.print("                <div>");
  client.print("                    <label for='start-point'>Explore ECG: </label>");
  client.print("                    <input type='range' id='start-point' min='0' value='0' step='1'>");
  client.print("                    <span id='start-point-display'>0</span>");
  client.print("                </div>");
  client.print("                <div>");
  client.print("                    <label for='window-size'>Window size (number of data): </label>");
  client.print("                    <input type='range' id='window-size' min='100' value='1' step='1'>");
  client.print("                    <span id='window-size-display'>100</span>");
  client.print("                </div>");
  client.print("            </div>");
  client.print("            <div class='col-6'>");
  client.print("                <div id='bpm-container'>");
  client.print("                    <h3 id='bpm-result'></h3>");
  client.print("                    <h3 id='alert'></h3>");
  client.print("                </div>");
  client.print("            </div>");
  client.print("        </div>");
  client.print("        ");
  client.print("        <div class='row'>");
  client.print("            <div id='ecg-container'></div>");
  client.print("        </div>");
  client.print("        <div class='row'>");
  client.print("            <div id='tachogram-container'></div>");
  client.print("        </div>");
  client.print("    </div>");
  client.print("    ");
  client.print("    <footer id='footer'>");
  client.print("        <p>Authors: <a href='https://github.com/sergiocanar'>Sergio Andres Canar Lozano</a> (202020383) and <a href='https://github.com/DavidTobonIBIO'>David Tobon Molina</a> (202123804)</p>");
  client.print("        <p>Source code: <a href='https://github.com/sergiocanar/signals_webpage'>");
  client.print("            https://github.com/sergiocanar/signals_webpage</a></p>");
  client.print("    </footer>");
  client.print("    <script>");
  client.print("");
  client.print("let ecgSignal = [];");
  client.print("let timeArray = [];");
  client.print("let rrIntervals = [];");
  client.print("");
  client.print("");
  client.print("function updateView() {");
  client.print("    ");
  client.print("    let freqVal = parseInt(document.getElementById('freq').value);");
  client.print("    let startPointVal = parseInt(document.getElementById('start-point').value);");
  client.print("    let windowSizeVal = parseInt(document.getElementById('window-size').value);");
  client.print("    ");
  client.print("    document.getElementById('freq-display').innerText = freqVal + ' Hz';");
  client.print("    document.getElementById('start-point-display').innerText = startPointVal;");
  client.print("    document.getElementById('window-size-display').innerText = windowSizeVal;");
  client.print("    ");
  client.print("    updatePlots(freqVal, startPointVal, windowSizeVal);  ");
  client.print("    ");
  client.print("    calculateBPM();");
  client.print("}");
  client.print("");
  client.print("");
  client.print("function setMaxSliderValues(nData) {");
  client.print("    document.getElementById('start-point').max = nData;");
  client.print("    document.getElementById('window-size').max = nData;");
  client.print("}");
  client.print("");
  client.print("");
  client.print("function createECG(sampleRate) {");
  client.print("    ecgSignal = [];");
  client.print("    timeArray = [];");
  client.print("");
  client.print("    const nData = 2000;");
  client.print("    setMaxSliderValues(nData); ");
  client.print("    let height = 200;");
  client.print("    let amplitude = height / 2;");
  client.print("    let start = 0;");
  client.print("    let timePerSample = 1 / sampleRate;");
  client.print("");
  client.print("    let maxAmplitude = amplitude * (0.5 + 0.5 * 0.5);");
  client.print("    for (let i = 0; i < nData; i++) {");
  client.print("        let y = start + maxAmplitude * Math.sin((i / nData) * sampleRate * 2 * Math.PI);");
  client.print("        ecgSignal.push(y);");
  client.print("    }");
  client.print("");
  client.print("    timeArray = Array.from({ length: ecgSignal.length }, (_, i) => parseFloat((i * timePerSample).toFixed(2)));");
  client.print("}");
  client.print("");
  client.print("");
  client.print("");
  client.print("function detectPeaksInWindow(start, end) {");
  client.print("    let peaks = [];");
  client.print("    let window = ecgSignal.slice(start, end);");
  client.print("    let peakValues = window.filter((val, i) =>");
  client.print("        i > 0 && i < window.length - 1 && val > window[i - 1] && val > window[i + 1]");
  client.print("    );");
  client.print("");
  client.print("    if (peakValues.length > 0) {");
  client.print("        let meanVal = mean(peakValues);");
  client.print("        let stdVal = std(peakValues, meanVal);");
  client.print("");
  client.print("        let minThreshold = meanVal + 1 * stdVal;");
  client.print("        let maxThreshold = meanVal + 5 * stdVal;");
  client.print("");
  client.print("        for (let i = 1; i < window.length - 1; i++) {");
  client.print("            if (");
  client.print("                window[i] >= minThreshold &&");
  client.print("                window[i] <= maxThreshold &&");
  client.print("                window[i] > window[i - 1] &&");
  client.print("                window[i] > window[i + 1]");
  client.print("            ) {");
  client.print("                peaks.push(start + i);");
  client.print("            }");
  client.print("        }");
  client.print("    }");
  client.print("    return peaks;");
  client.print("}");
  client.print("");
  client.print("");
  client.print("function detectPeaksWithSlidingWindow(windowSize, step) {");
  client.print("    let allPeaks = [];");
  client.print("");
  client.print("    for (let start = 0; start < ecgSignal.length - windowSize; start += step) {");
  client.print("        let end = start + windowSize;");
  client.print("        let peaks = detectPeaksInWindow(start, end);");
  client.print("        allPeaks.push(...peaks);");
  client.print("    }");
  client.print("");
  client.print("    return { allPeaks, tacoTimeArray: timeArray.slice(allPeaks[1]) };");
  client.print("}");
  client.print("");
  client.print("");
  client.print("function mean(arr) {");
  client.print("    return arr.reduce((sum, value) => sum + value, 0) / arr.length;");
  client.print("}");
  client.print("");
  client.print("");
  client.print("function std(arr, meanVal) {");
  client.print("    let variance = arr.reduce((sum, value) => sum + Math.pow(value - meanVal, 2), 0) / arr.length;");
  client.print("    return Math.sqrt(variance);");
  client.print("}");
  client.print("");
  client.print("");
  client.print("function calculateRRIntervals(peaks, timeArray) {");
  client.print("    rrIntervals = [];");
  client.print("");
  client.print("    for (let i = 1; i < peaks.length; i++) {");
  client.print("        let rr = timeArray[peaks[i]] - timeArray[peaks[i - 1]];");
  client.print("");
  client.print("        ");
  client.print("        if (rr > 0) {");
  client.print("            rrIntervals.push(rr);");
  client.print("        }");
  client.print("    }");
  client.print("}");
  client.print("");
  client.print("");
  client.print("function plotTachogram(timeArray) {");
  client.print("    Highcharts.chart('tachogram-container', {");
  client.print("        chart: { type: 'line' },");
  client.print("        title: { text: 'Tachogram' },");
  client.print("        xAxis: { title: { text: 'Time (seconds)' }, categories: timeArray },");
  client.print("        yAxis: { title: { text: 'RR-interval (seconds)' } },");
  client.print("        series: [{ name: 'RR-interval', data: rrIntervals }]");
  client.print("    });");
  client.print("}");
  client.print("");
  client.print("");
  client.print("function updatePlots(freq, startPoint, windowSize) {");
  client.print("    createECG(freq);");
  client.print("    let signalWindow = ecgSignal.slice(startPoint, startPoint + windowSize);");
  client.print("    let timeWindow = timeArray.slice(startPoint, startPoint + windowSize);");
  client.print("");
  client.print("    Highcharts.chart('ecg-container', {");
  client.print("        chart: { type: 'line' },");
  client.print("        title: { text: 'ECG Signal' },");
  client.print("        xAxis: { title: { text: 'Time (seconds)' }, categories: timeWindow },");
  client.print("        yAxis: { title: { text: 'Amplitude' } },");
  client.print("        series: [{ name: 'ECG Signal', data: signalWindow }]");
  client.print("    });");
  client.print("    let data = detectPeaksWithSlidingWindow(windowSize, 10);");
  client.print("    calculateRRIntervals(data.allPeaks, data.tacoTimeArray);");
  client.print("    plotTachogram(data.tacoTimeArray);");
  client.print("}");
  client.print("");
  client.print("");
  client.print("function calculateBPM() {");
  client.print("    let alertView = document.getElementById('alert');");
  client.print("    if (rrIntervals.length > 0) {");
  client.print("        const avgRRIntervals = rrIntervals.reduce((a, b) => a + b, 0) / rrIntervals.length;");
  client.print("        const bpm = 60 / avgRRIntervals;");
  client.print("");
  client.print("        document.getElementById('bpm-result').innerText = bpm.toFixed(2) + ' BPM';");
  client.print("        if (bpm < 60) {");
  client.print("            alertView.innerText = 'Alert! possible bradycardia.';");
  client.print("            alertView.style.color = 'red';");
  client.print("        } else if (bpm > 100) {");
  client.print("            alertView.innerText = 'Alert! possible tachycardia.';");
  client.print("            alertView.style.color = 'red';");
  client.print("        } else {");
  client.print("            alertView.innerText = 'Within the normal range.';");
  client.print("            alertView.style.color = 'green';");
  client.print("        }");
  client.print("    } else {");
  client.print("        document.getElementById('bpm-result').innerText = 'N/A';");
  client.print("        alertView.innerText = 'Not enough peaks to calculate BPM.';");
  client.print("        alertView.style.color = 'black';");
  client.print("    }");
  client.print("}");
  client.print("");
  client.print("");
  client.print("document.addEventListener('DOMContentLoaded', updateView);");
  client.print("");
  client.print("");
  client.print("let freqSlider = document.getElementById('freq');");
  client.print("freqSlider.oninput = () => updateView();");
  client.print("");
  client.print("let startPointSlider = document.getElementById('start-point');");
  client.print("startPointSlider.oninput = () => updateView();");
  client.print("");
  client.print("let windowSizeSlider = document.getElementById('window-size');");
  client.print("windowSizeSlider.oninput = () => updateView();");
  client.print("</script>");
  client.print("</body>");
  client.print("");
  client.print("</html>");

    client.println();
}
